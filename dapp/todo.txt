faire une belle dapp
tres fonctionnelle sans defauts, propre niveau solidity web3, reload si etat qui change etc...
voir des exemples
CSS design
comprendre npm install sans rien
comprendre, me familiariser avec bootstrap (+dev web!)
deployer heroku sur un testnet

*************** SPECS

Votre Dapp doit permettre : 

l’enregistrement d’une liste blanche d'électeurs. 



à l'administrateur de commencer la session d'enregistrement de la proposition.

aux électeurs inscrits d’enregistrer leurs propositions.
à l'administrateur de mettre fin à la session d'enregistrement des propositions.
à l'administrateur de commencer la session de vote.
aux électeurs inscrits de voter pour leurs propositions préférées.
à l'administrateur de mettre fin à la session de vote.
à l'administrateur de comptabiliser les votes.
à tout le monde de consulter le résultat.


Q: offre-t-on la possibilité de refaire le process? un nouveau vote?
un truc à la snapshot sauf qu'au lieu de la liste des projets on a la liste des sessions de vote
et on fait "new voting session"

Les recommandations et exigences :

Votre code doit être optimal. 
Votre Dapp doit être sécurisée. 
Vous devez utiliser la box react de Truffle. 
À rendre :

Vidéo démo des fonctionnalités de votre Front (hébergement youtube, Google Drive ou autre).
Lien vers votre répertoire Github. 





*************** TODO
message qui dit si on n'est pas sur la bonne blockchain
gestion changement de compte

admin page/voting page?
ui voir bootstrap


*************** road map


- whitelist register

- message qui dit si on n'est pas sur la bonne blockchain
gestion changement de compte
+afficher la chain dans la navbar et indiquer si wrong chain

- gestion erreur si compte non autorisé (non owner)

j'ai la log mas voir si on peut faire mieux + colorer le compte dans navbar selon ses droits!


+ voir ceci pour les best practices metamask
https://docs.metamask.io/guide/ethereum-provider.html

- bouton "connect"?

- ce serait cool d'arriver  m'inspirer du code source d'une dapp "classqie" avec gestion du reseau, de l'account et bouton connect
maybe scaffold? chercher sur le web des templates --> an cours avec la box custom redux
- bugs:

** must provide an ethereum address at start (peut etre resolu avec la gestion de changement de compte)
** identicon not working
** navbar de dtube, mord sur la dapp
** gestion mauvaise chaine
** bug: possibilité d'autoriser 2 x le meme compte (en tous cas il apparait 2 x dans la liste)
- start proposal regsiter 

- UI: clean/understand current make new, check real websites, bootstrap tuts

- penser aux components, 1 component par fonctiounnalité (cf livre)

- admin page vs client page
navbar?


*********************************

- admin change status client proposal registration

- design admin: pour le moment un bouton par etat 
-> faire mieux: proposer le bouton correspondant à l'état suivant?
griser les boutons non utilisables?
voir l'existant...

- affichier l'état courant (startregistration, startvote, etc...)

DESIGN BASIC MAIS FONCTIONNEL PUIS REPRISE DES POINTS PRECEDENTS
PAS TROP DE CSS POUR LE MOMENT MAIS REACT PROPRE ET BIEN STRUCTURE


- admin page: register user, change state
- register proposal page
- vote page? (ou la meme que register)

** menu lateral (cf snapshot): admin page, "user" page (trouver un meilleur nom)
** admin page: whitelist display , add user
display current state, change state, display previous and next

** proposals page
add proposal
display proposal list
desactiver la creation de proposition si on n'est pas dans le bon state 

vote (+ display has already voted or not)
indiquer le statut de manière globale


REACT

// workflow simplifié histoire de me smplifier la suite (mais pas me prendre trop la tête)

// 1. Break the app into components

- main qui contient le reste 

- header: app name, icon, account, blockchain, connect button
state: registering, etc...

- menu lateral
    - pages 

- default page: app name, image
- admin page
    white list
    add user
    move to next 

- proposal page
    proposal list
    add proposal (greyed or not)
    vote (greyed or not)

// 2. Build a static version of the app
a) main, header, menu lateral, default page

b) admin page

c) proposal page

// 3. Determine what should be stateful
// 4. Determine in which component each piece of state should live
// 5. Hard-code initial states
// 6. Add inverse data flow
// 7. Add server communication





***************************** SUITE DAPP


***************************** FIN DAPP
future work: possibilité de faire plusieurs sessions de vote: add new session etc...

***************************** A LA FIN

me faire les deux parcours web sur lynda
+ des parcours wen=b design/UX


